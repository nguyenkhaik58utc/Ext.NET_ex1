@using System.Data
@{
    ViewBag.Title = "Table";
    var X = Html.X();
}
<!DOCTYPE html>

<html>
<head>
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css">
    <script src="~/Scripts/jquery-3.4.1.min.js"></script>
    <script src="~/Scripts/bootstrap.min.js"></script>
    <script>
        var template = '<span style="color:{0};">{1}</span>';

        var firstChange = function (value) {
            return Ext.String.format(template, (value > 0) ? "green" : "red", value + "%");
        };

        var lastChange = function (value) {
            return Ext.String.format(template, (value > 0) ? "green" : "red", value + "%");
        };
    </script>
</head>
<body>
    @(Html.X().ResourceManager())
    <h2 style="padding-left:20px">Table</h2>


    <div class="container-fluid">
        <div class="row">
            <!-- LeftMain -->
            <div id="leftMain" class="col-md-3 " style="text-align:center">
                
            </div>
            <!-- Rightmain -->
            <div id="rightMain" class="col-md-9">
                @(X.FormPanel()
                        .Padding(20)
                        .Title("Edit price company")
                        .Layout(LayoutType.Form)
                        .Items(
                            X.TextField()
                            .ID("txtNameComp1")
                            .Name("Name Company")
                            .Enable(false)
                            .FieldLabel("Name Company")
                            .AllowBlank(false)
                            .BlankText("Your username is required"),
                           X.TextField()
                            .ID("txtPrice1")
                            .Name("Price")
                            .InputType(Ext.Net.InputType.Number)
                            .FieldLabel("Price")
                            .AllowBlank(false)
                            .BlankText("Your price is required"),
                           X.DateField()
                            .ID("txtDate1")
                            .Name("date")
                            .InputType(Ext.Net.InputType.DateTime)
                            .FieldLabel("DateTime")
                            .AllowBlank(false)
                            .BlankText("Your datetime is required")


    )
                        .Buttons(
                            X.Button()
                            .Icon(Icon.Add)
                            .Text("Add")
                            .StyleSpec("margin-top:15px;margin-left:15px")
                            .OnClientClick("Ext.Msg.alert('Add', 'Done');"),
                           X.Button()
                            .Icon(Icon.Cancel)
                            .Text("Cancel")
                            .StyleSpec("margin-top:15px;margin-left:15px")
                            .OnClientClick("Ext.Msg.alert('Cancel', 'Done');")
    ))
            </div>

        </div>

        @(X.FormPanel()
        .ID("FormPanel1")
        .Title("Company data")
        .ColumnWidth(1)
        .BodyPadding(5)
        .Layout(LayoutType.Column)
        .FieldDefaults(fd => {
            fd.LabelAlign = LabelAlign.Left;
            fd.MsgTarget = MessageTarget.Side;
        })
        .Buttons(
            X.Button()
                .Weight(100)
                .Icon(Icon.Add)
                .Text("Add")
                .StyleSpec("margin-top:15px;margin-left:15px")
                .OnClientClick("App.WindowsEdit.show(this)"),
           X.Button()
                .Text("Edit")
                .Icon(Icon.NoteEdit)
                .OnClientClick("Ext.Msg.alert('Edit', 'Done');")
                .Handler("handleClientClick")
                    .DirectEvents(de =>
                    {
                        de.Click.Url = Url.Action("Edit_Click");
                        de.Click.ShowWarningOnFailure = false;
                        de.Click.EventMask.ShowMask = true;
                        de.Click.EventMask.Msg = "Verifying...";

                        de.Click.ExtraParams.Add(new Parameter("nameCompany", "App.txtNameCompEdit.value", ParameterMode.Raw));
                        de.Click.ExtraParams.Add(new Parameter("price", "App.txtPriceEdit.value", ParameterMode.Raw));
                        de.Click.ExtraParams.Add(new Parameter("change", "App.txtLastChangeEdit.value", ParameterMode.Raw));
                        de.Click.ExtraParams.Add(new Parameter("date", "App.txtLastUpdateEdit.value", ParameterMode.Raw));
                    }),
           X.Button()
                .Weight(100)
                .Icon(Icon.Delete)
                .Text("Delete")
                .OnClientClick("Ext.Msg.alert('Delete', 'Done');")
                .Handler("handleClientClick")
                    .DirectEvents(de =>
                    {
                        de.Click.Url = Url.Action("Delete_Click");
                        de.Click.ShowWarningOnFailure = false;
                        de.Click.EventMask.ShowMask = true;
                        de.Click.EventMask.Msg = "Verifying...";

                        de.Click.ExtraParams.Add(new Parameter("nameCompany", "App.txtNameCompEdit.value", ParameterMode.Raw));
                    }),
           X.Button()
                .Icon(Icon.ControlRemove)
                .Text("Reset Fields")
                .OnClientClick("this.up('form').getForm().reset();"),
           X.Button()
                .Text("Get Values...")
                .OnClientClick("alert(Ext.encode(this.up('form').getForm().getValues()));")
        )
        .Items(
        X.GridPanel()
            .ID("GridPanel1")
            .ColumnWidth(0.7)
            .ColumnLines(true)
            .Title("Get all record")
            .Padding(20)
            .Listeners(l => l.SelectionChange.Handler = "if (selected[0]) { this.up('form').getForm().loadRecord(selected[0]); }")
            .Store(
                X.Store().ID("Store1")
                    .Model(X.Model().Fields(
                        X.ModelField().Name("nameCompany"),
                        X.ModelField().Name("price").Type(ModelFieldType.Float),
                        X.ModelField().Name("firstChange").Type(ModelFieldType.Float),
                        X.ModelField().Name("lastChange").Type(ModelFieldType.Float),
                        X.ModelField().Name("lastUpdate").Type(ModelFieldType.Date)
                    ))
                    .DataSource(Model)
            )
            .ColumnModel(
                X.Column().Text("Company").DataIndex("nameCompany").Flex(1),
                X.Column().Text("Price").DataIndex("price").Renderer(RendererFormat.UsMoney),
                X.Column().Text("Fisrt Change").DataIndex("firstChange").Renderer("firstChange"),
                X.Column().Text("Last Change").DataIndex("lastChange").Renderer("lastChange"),
                X.Column().Text("Last Updated").DataIndex("lastUpdate")
            ),

        X.FieldSet()
            .ColumnWidth(0.25)
            .Title("Cập nhật")
            .Padding(20)
            .Defaults(d => { d.Add(new Parameter("LabeWidth", "115")); })
            .Items(
            X.TextField()
                .Name("nameCompany")
                .Disabled(true)
                .ID("txtNameCompEdit")
                .FieldLabel("Name"),
            X.TextField()
                .Name("price")
                .Disabled(true)
                .ID("txtPriceEdit")
                .FieldLabel("Price"),
            X.TextField()
                .Name("lastChange")
                .ID("txtLastChangeEdit")
                .FieldLabel("Change (%)"),
            X.DateField()
                .Name("lastUpdate")
                .ID("txtLastUpdateEdit")
                .FieldLabel("Last Updated")
            )
            )
        )
        @(X.Window()
        .Hidden(true)
        .ID("WindowsEdit")
        .MinWidth(400)
        .Padding(20)
        .Title("Edit price company")
        .Layout(LayoutType.Form)
        .Items(
            X.TextField()
            .ID("txtNameComp")
            .Name("Name Company")
            .Enable(false)
            .FieldLabel("Name Company")
            .AllowBlank(false)
            .BlankText("Your username is required"),
           X.TextField()
            .ID("txtPrice")
            .Name("Price")
            .InputType(Ext.Net.InputType.Number)
            .FieldLabel("Price")
            .AllowBlank(false)
            .BlankText("Your price is required"),
           X.DateField()
            .ID("txtDate")
            .Name("date")
            .InputType(Ext.Net.InputType.DateTime)
            .FieldLabel("DateTime")
            .AllowBlank(false)
            .BlankText("Your datetime is required")


    )
        .Buttons(
            X.Button()
            .Icon(Icon.Add)
            .Text("Add")
            .StyleSpec("margin-top:15px;margin-left:15px")
            .OnClientClick("Ext.Msg.alert('Add', 'Done');")
            .Handler("handleClientClick")
                    .DirectEvents(de =>
                    {
                        de.Click.Url = Url.Action("Add_Click");
                        de.Click.ShowWarningOnFailure = false;
                        de.Click.EventMask.ShowMask = true;
                        de.Click.EventMask.Msg = "Verifying...";

                        de.Click.ExtraParams.Add(new Parameter("nameCompany", "App.txtNameComp.value", ParameterMode.Raw));
                        de.Click.ExtraParams.Add(new Parameter("price", "App.txtPrice.value", ParameterMode.Raw));
                        de.Click.ExtraParams.Add(new Parameter("date", "App.txtDate.value", ParameterMode.Raw));
                    }),
           X.Button()
            .Icon(Icon.Cancel)
            .Text("Cancel")
            .StyleSpec("margin-top:15px;margin-left:15px")
    ))
        <p>asjkhdjskad</p>
    </div>



</body>
</html>


